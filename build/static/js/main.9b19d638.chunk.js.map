{"version":3,"sources":["logo.svg","Logo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","data","this","props","u","smallDig","largeDig","middleDist","localRotation","mainRotation","pathSmall","concat","pathMid","pathLarge","mainTransform","translateX","translateY","middleTranslate","transforms","react_default","a","createElement","xmlns","width","height","id","fill","d","transform","map","trans","i","key","href","React","Component","App","state","package","Math","sqrt","isAwesome","feelsLike","handleUpdate","_this","setState","className","src_Logo","react_dat_gui_default","onUpdate","react_dat_gui","path","label","min","max","step","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b19d638.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nclass Logo extends React.Component {\n  render() {\n    const { data } = this.props;\n\n    const u = 22;\n    const {\n      smallDig,\n      largeDig,\n      middleDist,\n      localRotation,\n      mainRotation\n    } = data;\n\n    const pathSmall = `\n      M 0, 0\n      L ${-u}, 0\n      A ${u} ${u} 0 0 0 ${-u * 2} ${u}\n      L ${-u * 2}, ${-u * smallDig}\n      A ${u} ${u} 0 0 1 0 ${-u * smallDig}\n    `;\n\n    const pathMid = `\n      M 0, 0\n      L ${-u}, 0\n      A ${u} ${u} 0 1 0 0 ${u}\n    `;\n\n    const pathLarge = `\n      M 0, 0\n      L 0, ${u}\n      A ${u} ${u} 0 0 1 ${-u} ${u * 2}\n      L ${u * largeDig}, ${u * 2}\n      A ${u} ${u} 0 0 0 ${u * largeDig} 0\n    `;\n\n    const mainTransform = `translate(${data.translateX} ${\n      data.translateY\n    }) scale(0.97 0.97) rotate(${mainRotation})`;\n\n    const middleTranslate = u * middleDist;\n\n    const transforms = [\n      `translate(${middleTranslate} 0) rotate(${localRotation})`,\n      `translate(0 ${middleTranslate}) rotate(${localRotation + 90})`,\n      `translate(${-middleTranslate} 0) rotate(${localRotation + 180})`,\n      `translate(0 ${-middleTranslate}) rotate(${localRotation + 270})`\n    ];\n\n    return (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" height=\"600px\">\n        <defs>\n          <g id=\"lshape\">\n            <path fill=\"#51D895\" d={pathSmall} />\n            <path fill=\"#1C9B5C\" d={pathMid} />\n            <path fill=\"#25CE7B\" d={pathLarge} />\n          </g>\n        </defs>\n        <g transform={mainTransform}>\n          {transforms.map((trans, i) => (\n            <use key={i} href=\"#lshape\" transform={trans} />\n          ))}\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default Logo;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Logo from \"./Logo\";\n\nimport DatGui, {\n  DatBoolean,\n  DatButton,\n  DatColor,\n  DatNumber,\n  DatString\n} from \"react-dat-gui\";\nimport \"react-dat-gui/build/react-dat-gui.css\";\n\nclass App extends Component {\n  state = {\n    data: {\n      package: \"react-dat-gui\",\n      translateX: 400,\n      translateY: 300,\n      smallDig: 1.5,\n      largeDig: 3.63,\n\n      middleDist: 2 + Math.sqrt(2),\n\n      localRotation: 45,\n      mainRotation: 0,\n      isAwesome: true,\n      feelsLike: \"#2FA1D6\"\n    }\n  };\n\n  handleUpdate = data => this.setState({ data });\n\n  render() {\n    const { data } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Logo data={data} />\n\n        <DatGui data={data} onUpdate={this.handleUpdate}>\n          <DatString path=\"package\" label=\"Package\" />\n          <DatNumber\n            path=\"translateX\"\n            label=\"Translate X\"\n            min={0}\n            max={800}\n            step={1}\n          />\n          <DatNumber\n            path=\"translateY\"\n            label=\"Translate Y\"\n            min={0}\n            max={600}\n            step={1}\n          />\n\n          <DatNumber\n            path=\"smallDig\"\n            label=\"Small dig\"\n            min={0}\n            max={5}\n            step={0.1}\n          />\n          <DatNumber\n            path=\"largeDig\"\n            label=\"Large dig\"\n            min={0}\n            max={5}\n            step={0.1}\n          />\n\n          <DatNumber\n            path=\"middleDist\"\n            label=\"Middle dist\"\n            min={0}\n            max={5}\n            step={0.1}\n          />\n\n          <DatNumber\n            path=\"localRotation\"\n            label=\"Local rotation\"\n            min={0}\n            max={360}\n            step={1}\n          />\n\n          <DatNumber\n            path=\"mainRotation\"\n            label=\"Main rotation\"\n            min={0}\n            max={90}\n            step={1}\n          />\n\n          <DatBoolean path=\"isAwesome\" label=\"Awesome?\" />\n          <DatColor path=\"feelsLike\" label=\"Feels Like\" />\n        </DatGui>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}